## This file contains the most common config options that a user might want
## to customize.  The values are mostly the same as in
## mpas_analysis/default.cfg, the default config file, which has nearly all of
## the available config options.
## Usage:
##  1. Copy this file to a new name for a specific run (say myrun.cfg).
##
##  2. Modify any config options you want to change in your new config file.
##     At a minimum, you need to specify:
##       * [runs]/mainRunName -- A name for the run to be included plot titles
##                               and legends
##       * [diagnostics]/baseDirectory -- The base directory for observations,
##                                        mapping files and region masks
##       * [input]/baseDirectory -- The directory for the simulation results
##                                  to analyze
##       * [input]/mpasMeshName -- The name of the MPAS ocean/sea ice mesh
##       * [output]/baseDirectory -- The directory for the analysis results
##
##  3. run:
##
##        $ mpas_analysis myrun.cfg
##
##     This will read the configuration first from mpas_analysis/default.cfg
##     and then replace that configuration with any changes from from myrun.cfg
##
##  4. If you want to run a subset of the analysis, you can either set
##     [output]/generate in your config file or use the --generate flag on the
##     command line.  See the comments for [output]/generate below for more
##     details on this option.


[runs]
## options related to the run to be analyzed and control runs to be
## compared against

# mainRunName is a name that identifies the simulation being analyzed.
mainRunName = runName

# config file for a control run to which this run will be compared.  The
# analysis should have already been run to completion once with this config
# file, so that the relevant MPAS climatologies already exist and have been
# remapped to the comparison grid.  Leave this option commented out if no
# control run is desired.
# controlRunConfigFile = /path/to/config/file

# config file for a main run on which the analysis was already run to
# completion.  The relevant MPAS climatologies already exist and have been
# remapped to the comparison grid and time series have been extracted.
# Leave this option commented out if the analysis for the main run should be
# performed.
# mainRunConfigFile = /path/to/config/file


[execute]
## options related to executing parallel tasks

# the number of parallel tasks (1 means tasks run in serial, the default)
parallelTaskCount = 1

# the parallelism mode in ncclimo ("serial", "bck" or "mpi")
# Set this to "bck" (background parallelism) if running on a machine that can
# handle 12 simultaneous processes, one for each monthly climatology.
# Set to "mpi" to run one MPI task on each node and however many threads per
# node to reach 12 total threads.
ncclimoParallelMode = serial

# the number of MPI tasks to use in creating mapping files (1 means tasks run in
# serial, the default)
mapMpiTasks = 1

# "None" if ESMF should perform mapping file generation in serial without a
# command, or one of "srun" or "mpirun" if it should be run in parallel (or in
# serial but with a command).
mapParallelExec = None
# Typically, use this instead if running E3SM-Unified on a compute node
# mapParallelExec = srun

# "None" if ncremap should perform remapping without a command, or "srun"
# possibly with some flags if it should be run with that command
ncremapParallelExec = None
# Use this if running E3SM-Unified on a compute node on Chrysalis or Anvil
# ncremapParallelExec = srun


[diagnostics]
## config options related to observations, mapping files and region files used
## by MPAS-Analysis in diagnostics computations.

# The base path to the diagnostics directory.  Typically, this will be a shared
# directory on each E3SM supported machine (see the example config files for
# its location).  For other machines, this would be the directory pointed to
# when running "download_analysis_data.py" to get the public observations,
# mapping files and region files.
base_path = /path/to/diagnostics


[input]
## options related to reading in the results to be analyzed

# directory containing model results
baseDirectory = /dir/for/model/output

# NOTE: an absolute path can be supplied for any of these subdirectories.
# A relative path is assumed to be relative to baseDirectory.
# In this example, results are assumed to be in <baseDirecory>/run

# subdirectory containing restart files
runSubdirectory = run
# subdirectory for ocean history files
oceanHistorySubdirectory = run
# subdirectory for sea ice history files
seaIceHistorySubdirectory = run

# names of namelist and streams files, either a path relative to baseDirectory
# or an absolute path.
oceanNamelistFileName = run/mpaso_in
oceanStreamsFileName = run/streams.ocean
seaIceNamelistFileName = run/mpassi_in
seaIceStreamsFileName = run/streams.seaice

# name of the ocean and sea-ice mesh (e.g. EC30to60E2r2, WC14to60E2r3,
# ECwISC30to60E2r1, SOwISC12to60E2r4, oQU240, etc.)
mpasMeshName = mesh


[output]
## options related to writing out plots, intermediate cached data sets, logs,
## etc.

# directory where analysis should be written
# NOTE: This directory path must be specific to each test case.
baseDirectory = /dir/for/analysis/output

# provide an absolute path to put HTML in an alternative location (e.g. a web
# portal)
htmlSubdirectory = html

# On and E3SM supported machine, this may be helpful:
# htmlSubdirectory = ${web_portal:base_path}/${web_portal:username}/dir/for/web/output



# a list of analyses to generate.  Valid names can be seen by running:
#   mpas_analysis --list
# This command also lists tags for each analysis.
# Shortcuts exist to generate (or not generate) several types of analysis.
# These include:
#   'all' -- all analyses will be run
#   'all_publicObs' -- all analyses for which observations are available on the
#                      public server (the default)
#   'all_<tag>' -- all analysis with a particular tag will be run
#   'all_<component>' -- all analyses from a given component (either 'ocean'
#                        or 'seaIce') will be run
#   'only_<component>', 'only_<tag>' -- all analysis from this component or
#                                       with this tag will be run, and all
#                                       analysis for other components or
#                                       without the tag will be skipped
#   'no_<task_name>' -- skip the given task
#   'no_<component>', 'no_<tag>' -- in analogy to 'all_*', skip all analysis
#                                   tasks from the given component or with
#                                   the given tag.  Do
#                                      mpas_analysis --list
#                                   to list all task names and their tags
# an equivalent syntax can be used on the command line to override this
# option:
#    mpas_analysis config.analysis --generate \
#         only_ocean,no_timeSeries,timeSeriesSST
#
# NOTE: if an appropriate reference year isn't available for computing
#       anomalies, include 'no_anomaly' in the generate list
generate = ['all_publicObs']


[climatology]
## options related to producing climatologies, typically to compare against
## observations and previous runs

# the year from which to compute anomalies if not the start year of the
# simulation.  This might be useful if a long spin-up cycle is performed and
# only the anomaly over a later span of years is of interest.
# NOTE: Simulations that branch from another run should use the start year of
#       the branch, not the start year of the simulation that was branched
#       from, since MPAS-Analysis will not be able to find data from the
#       original run.
# anomalyRefYear = 249

# the first year over which to average climatalogies
startYear = 11
# the last year over which to average climatalogies
endYear = 20


[timeSeries]
## options related to producing time series plots, often to compare against
## observations and previous runs

# the year from which to compute anomalies if not the start year of the
# simulation.  This might be useful if a long spin-up cycle is performed and
# only the anomaly over a later span of years is of interest.
# NOTE: Simulations that branch from another run should use the start year of
#       the branch, not the start year of the simulation that was branched
#       from, since MPAS-Analysis will not be able to find data from the
#       original run.
# anomalyRefYear = 249

# start and end years for timeseries analysis. Use endYear = end to indicate
# that the full range of the data should be used.  If errorOnMissing = False,
# the start and end year will be clipped to the valid range.  Otherwise, out
# of bounds values will lead to an error.  In a "control" config file used in
# a "main vs. control" analysis run, the range of years must be valid and
# cannot include "end" because the original data may not be available.
startYear = 1
endYear = end


[index]
## options related to producing nino index.

# start and end years for El Nino 3.4 analysis. Use endYear = end to indicate
# that the full range of the data should be used.  If errorOnMissing = False,
# the start and end year will be clipped to the valid range.  Otherwise, out
# of bounds values will lead to an error.  In a "control" config file used in
# a "main vs. control" analysis run, the range of years must be valid and
# cannot include "end" because the original data may not be available.
startYear = 1
endYear = end
